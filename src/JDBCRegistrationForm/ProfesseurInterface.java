
package JDBCRegistrationForm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Walid CHEKKOURI
 */
public class ProfesseurInterface extends javax.swing.JFrame {

    
 
    String[] currentAnswers = new String[3];
    int[] correcyAnswers = new int[3];
    int[] correcyAnswersIds = new int[3];
    /**
     * Creates new form RegistrationForm
     */
    public ProfesseurInterface()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroupEditing = new javax.swing.ButtonGroup();
        jlName = new javax.swing.JLabel();
        jlLogin = new javax.swing.JLabel();
        jtfName = new javax.swing.JTextField();
        jtfLogin = new javax.swing.JTextField();
        jbAddUser = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtUsersInfo = new javax.swing.JTable();
        jcbProfil = new javax.swing.JComboBox<String>();
        jlPassword = new javax.swing.JLabel();
        jtfPassword = new javax.swing.JPasswordField();
        jbListUsers = new javax.swing.JButton();
        jlProfil = new javax.swing.JLabel();
        jbDeleteUser = new javax.swing.JButton();
        jlName1 = new javax.swing.JLabel();
        jtfId = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jlName2 = new javax.swing.JLabel();
        jtfQuestion = new javax.swing.JTextField();
        jlName3 = new javax.swing.JLabel();
        jtfReponseA = new javax.swing.JTextField();
        jRadioButtonA = new javax.swing.JRadioButton();
        jlName4 = new javax.swing.JLabel();
        jtfReponseB = new javax.swing.JTextField();
        jRadioButtonB = new javax.swing.JRadioButton();
        jlName5 = new javax.swing.JLabel();
        jtfReponseC = new javax.swing.JTextField();
        jRadioButtonC = new javax.swing.JRadioButton();
        jButtonAddQuestionAndAnswers = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtQuestionsTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jbAddUser1 = new javax.swing.JButton();
        jRadioButtonA1 = new javax.swing.JRadioButton();
        jRadioButtonB1 = new javax.swing.JRadioButton();
        jRadioButtonC1 = new javax.swing.JRadioButton();
        jtfReponseB1 = new javax.swing.JTextField();
        jtfReponseA1 = new javax.swing.JTextField();
        jtfReponseC1 = new javax.swing.JTextField();
        jlName6 = new javax.swing.JLabel();
        jlName7 = new javax.swing.JLabel();
        jlName8 = new javax.swing.JLabel();
        jtfQuestionEditing = new javax.swing.JTextField();
        jlName9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jlName.setText("Nom");

        jlLogin.setText("Login");

        jtfName.setText("UserName");

        jtfLogin.setText("UserLogin");

        jbAddUser.setText("Add User");
        jbAddUser.setToolTipText("");
        jbAddUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddUserActionPerformed(evt);
            }
        });

        jtUsersInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nom", "Login", "Profil"
            }
        ));
        jtUsersInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtUsersInfoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtUsersInfo);

        jcbProfil.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Professeur", "Etudiant" }));

        jlPassword.setText("Password");

        jtfPassword.setText("password");

        jbListUsers.setText("List Users");
        jbListUsers.setToolTipText("");
        jbListUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbListUsersActionPerformed(evt);
            }
        });

        jlProfil.setText("Profil");

        jbDeleteUser.setText("Delete User");
        jbDeleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteUserActionPerformed(evt);
            }
        });

        jlName1.setText("Id");

        jtfId.setEnabled(false);

        jPanel1.setBackground(new java.awt.Color(51, 102, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("NOUVELLE QUESTION: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jlName2.setText("Question: ");

        jtfQuestion.setBackground(new java.awt.Color(51, 102, 255));
        jtfQuestion.setForeground(new java.awt.Color(255, 255, 255));
        jtfQuestion.setText("Question?");

        jlName3.setText("ReponseA: ");

        jtfReponseA.setBackground(new java.awt.Color(51, 102, 255));
        jtfReponseA.setForeground(new java.awt.Color(255, 255, 255));
        jtfReponseA.setText("ReponseA");

        jRadioButtonA.setBackground(new java.awt.Color(51, 102, 255));
        buttonGroup1.add(jRadioButtonA);
        jRadioButtonA.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButtonA.setSelected(true);
        jRadioButtonA.setText("Correct");

        jlName4.setText("ReponseB: ");

        jtfReponseB.setBackground(new java.awt.Color(51, 102, 255));
        jtfReponseB.setForeground(new java.awt.Color(255, 255, 255));
        jtfReponseB.setText("ReponseB");

        jRadioButtonB.setBackground(new java.awt.Color(51, 102, 255));
        buttonGroup1.add(jRadioButtonB);
        jRadioButtonB.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButtonB.setText("Correct");

        jlName5.setText("ReponseC: ");

        jtfReponseC.setBackground(new java.awt.Color(51, 102, 255));
        jtfReponseC.setForeground(new java.awt.Color(255, 255, 255));
        jtfReponseC.setText("ReponseC");

        jRadioButtonC.setBackground(new java.awt.Color(51, 102, 255));
        buttonGroup1.add(jRadioButtonC);
        jRadioButtonC.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButtonC.setText("Correct");

        jButtonAddQuestionAndAnswers.setText("AJOUTER");
        jButtonAddQuestionAndAnswers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddQuestionAndAnswersActionPerformed(evt);
            }
        });

        jtQuestionsTable.setBackground(new java.awt.Color(51, 204, 255));
        jtQuestionsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nom", "Login", "Profil"
            }
        ));
        jtQuestionsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtQuestionsTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jtQuestionsTable);

        jPanel2.setBackground(new java.awt.Color(0, 204, 255));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel2.setText("Ã‰DITEUR DES QUESTIONS");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jbAddUser1.setText("Modifier");
        jbAddUser1.setToolTipText("");
        jbAddUser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddUser1ActionPerformed(evt);
            }
        });

        jRadioButtonA1.setBackground(new java.awt.Color(51, 204, 255));
        buttonGroupEditing.add(jRadioButtonA1);
        jRadioButtonA1.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButtonA1.setText("Correct");

        jRadioButtonB1.setBackground(new java.awt.Color(51, 204, 255));
        buttonGroupEditing.add(jRadioButtonB1);
        jRadioButtonB1.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButtonB1.setSelected(true);
        jRadioButtonB1.setText("Correct");

        jRadioButtonC1.setBackground(new java.awt.Color(51, 204, 255));
        buttonGroupEditing.add(jRadioButtonC1);
        jRadioButtonC1.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButtonC1.setText("Correct");

        jtfReponseB1.setBackground(new java.awt.Color(51, 204, 255));
        jtfReponseB1.setForeground(new java.awt.Color(255, 255, 255));

        jtfReponseA1.setBackground(new java.awt.Color(51, 204, 255));
        jtfReponseA1.setForeground(new java.awt.Color(255, 255, 255));

        jtfReponseC1.setBackground(new java.awt.Color(51, 204, 255));
        jtfReponseC1.setForeground(new java.awt.Color(255, 255, 255));

        jlName6.setText("ReponseC: ");

        jlName7.setText("ReponseB: ");

        jlName8.setText("ReponseA: ");

        jtfQuestionEditing.setBackground(new java.awt.Color(51, 204, 255));
        jtfQuestionEditing.setForeground(new java.awt.Color(255, 255, 255));

        jlName9.setText("Question: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jlProfil, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jcbProfil, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jbAddUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jbListUsers, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jbDeleteUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jlName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jlLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(37, 37, 37))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jlPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jlName1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(11, 11, 11)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jtfId)
                                            .addComponent(jtfName)
                                            .addComponent(jtfLogin)
                                            .addComponent(jtfPassword))))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlName2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jlName3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jtfReponseA)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jRadioButtonA))
                                    .addComponent(jtfQuestion)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jlName4, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jlName5, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jtfReponseC)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jRadioButtonC))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jtfReponseB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jRadioButtonB)))))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonAddQuestionAndAnswers)
                        .addGap(235, 235, 235))))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jlName9, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlName8, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jtfReponseA1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonA1, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jtfQuestionEditing)))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jlName7, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlName6, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbAddUser1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtfReponseC1, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                            .addComponent(jtfReponseB1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonB1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonC1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlName1)
                            .addComponent(jtfId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlName)
                            .addComponent(jtfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlLogin)
                            .addComponent(jtfLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlPassword)
                            .addComponent(jtfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jcbProfil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlProfil))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbAddUser)
                            .addComponent(jbDeleteUser)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbListUsers)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlName2)
                    .addComponent(jtfQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlName3)
                    .addComponent(jtfReponseA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlName4)
                    .addComponent(jtfReponseB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlName5)
                    .addComponent(jtfReponseC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonC))
                .addGap(18, 18, 18)
                .addComponent(jButtonAddQuestionAndAnswers)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlName9)
                    .addComponent(jtfQuestionEditing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlName8)
                    .addComponent(jtfReponseA1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonA1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlName7)
                    .addComponent(jtfReponseB1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonB1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlName6)
                    .addComponent(jtfReponseC1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonC1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jbAddUser1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAddUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddUserActionPerformed
        String name = jtfName.getText();
        String login = jtfLogin.getText();
     // String password = jtfPassword.getPassword().toString();
        String password = jtfPassword.getText().toString();
        int profile = jcbProfil.getSelectedIndex();
        
        User user1 = new User(name, login, password, profile );
        
           
      //  DefaultTableModel model = (DefaultTableModel)jtUsersInfo.getModel();
        //add user info to the table
      //  model.addRow(new String[]{name,login, password,profile+""}); 
      //  jtUsersInfo.setModel(model);
        
        
        
      boolean res=  user1.addUser();
       //  if user is added successfully
       if (res)
       {
            jbListUsersActionPerformed(evt);
            JOptionPane.showMessageDialog(this,  "User addes successfully ", "Congrats", JOptionPane.NO_OPTION);
       }
       else
        JOptionPane.showMessageDialog(this,  "Error adding User! ", "ERROR", JOptionPane.ERROR);

       
        
    }//GEN-LAST:event_jbAddUserActionPerformed

    private void jbListUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbListUsersActionPerformed
        // TODO add your handling code here:
        
        updateTable();
    }//GEN-LAST:event_jbListUsersActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
         updateTable();
         updateTableQuestions();
    }//GEN-LAST:event_formWindowOpened

    private void jbDeleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteUserActionPerformed
       int selectedRow = jtUsersInfo.getSelectedRow();
       
       //get user id from selected row
       int userId = Integer.parseInt(jtUsersInfo.getModel().getValueAt( selectedRow, 0).toString());
      if(userId != -1)//if a row is indeed selected
      {
         boolean res= User.deleteUser(userId);
         if(res)
              JOptionPane.showMessageDialog(this,  "User deleted successfully ", "Congrats", JOptionPane.NO_OPTION);
     else
             JOptionPane.showMessageDialog(this,  "Error deleting User! ", "ERROR", JOptionPane.ERROR);
      }
          
       
    }//GEN-LAST:event_jbDeleteUserActionPerformed

    private void jtUsersInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtUsersInfoMouseClicked
       int row= jtUsersInfo.getSelectedRow();
       
       int id = Integer.parseInt(jtUsersInfo.getValueAt(row, 0).toString());
       String name = jtUsersInfo.getValueAt(row, 1).toString();
       String login = jtUsersInfo.getValueAt(row, 2).toString();
       int profil = Integer.parseInt(jtUsersInfo.getValueAt(row, 4).toString());
      


       if(profil==0)
           jcbProfil.setSelectedIndex(0);
       else
           jcbProfil.setSelectedIndex(1);
       
       jtfName.setText(name);
       jtfLogin.setText(login);
       
       jtfId.setText(id+"");
    }//GEN-LAST:event_jtUsersInfoMouseClicked

    private void jButtonAddQuestionAndAnswersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddQuestionAndAnswersActionPerformed
      int questionId=-1;
      questionId =  addQuestionToQuestionsTable();
      if(questionId!=-1)
      {
          addAnswerAToAnswerTable(questionId);
          addAnswerBToAnswerTable(questionId);
          addAnswerCToAnswerTable(questionId);
          
          JFrame frame;
            frame= new JFrame();
           JOptionPane.showMessageDialog(frame, "QCM Ajouter avec succÃ¨s!");
           updateTableQuestions();
      }
            
       
       
    }//GEN-LAST:event_jButtonAddQuestionAndAnswersActionPerformed

    private void jtQuestionsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtQuestionsTableMouseClicked
       int row= jtQuestionsTable.getSelectedRow();
       int idQuestion = Integer.parseInt(jtQuestionsTable.getValueAt(row, 0).toString());
       String questionEnonce = jtQuestionsTable.getValueAt(row, 1).toString();
    
       jtfQuestionEditing.setText(questionEnonce+"");
       
       
       getAnswersOfQuestion(idQuestion);
       
       jRadioButtonA1.setSelected( (correcyAnswers[0] == 1) ? true : false);
       jRadioButtonB1.setSelected( (correcyAnswers[1] == 1) ? true : false);
       jRadioButtonC1.setSelected( (correcyAnswers[2] == 1) ? true : false);
       
       jtfReponseA1.setText(currentAnswers[0]);
       jtfReponseB1.setText(currentAnswers[1]);
       jtfReponseC1.setText(currentAnswers[2]);
              
       
    }//GEN-LAST:event_jtQuestionsTableMouseClicked

    private void jbAddUser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddUser1ActionPerformed
         /////Question editing
        
        int selectedRow = jtQuestionsTable.getSelectedRow();
               ResultSet res = null;
       //get user id from selected row
       int IdQuestion = Integer.parseInt(jtQuestionsTable.getModel().getValueAt( selectedRow, 0).toString());
       
       String questionEnonce = jtfQuestionEditing.getText().toString().trim();

       
      if(IdQuestion != -1)//if a row is indeed selected
      {
          String req = "UPDATE questiontable " +
                   "SET enonce = '"+questionEnonce+ "'" 
                  + " WHERE idQuest = "+ IdQuestion;
          
          System.err.println("id= "+IdQuestion+" Req: " + req);
         try
        {

            Connection cnx =  DBConnection.connect();
            Statement stmt = cnx.createStatement();
        
            
            stmt.executeUpdate(req);
  
       
       // System.err.println("Req: " + req);

           
      
      
      modifyAnswerA(IdQuestion);
      modifyAnswerB(IdQuestion);
      modifyAnswerC(IdQuestion);
      
            JFrame frame;
            frame= new JFrame();
   
           JOptionPane.showMessageDialog(frame, "QCM Ã©ditÃ© avec succÃ¨s!");

        }catch (SQLException ex)
        {
            System.err.println("PConnection Problem!");
              System.out.println("Error: ! "+ex.getMessage() + "\n");
              ex.getStackTrace();
        }
      }
      
      /////Answers editing
      
      
      
       updateTableQuestions();
      
      
      
      
    }//GEN-LAST:event_jbAddUser1ActionPerformed

    public void updateTable()
    {
    ResultSet res = null;
        
        String req = "SELECT * FROM tbl_users";

         try
        {

            Connection cnx =  DBConnection.connect();
            Statement stmt = cnx.createStatement();
            
            res = stmt.executeQuery(req);
            
            //create a new model for our JTable, it receives its data from a method in Utility Class
            DefaultTableModel monModel = Utility.buildTableModel(res);
            jtUsersInfo.setModel(monModel);

        }catch (SQLException ex)
        {
            System.err.println("PConnection Problem!");
        }
    
    
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                
                
                
                new ProfesseurInterface().setVisible(true);
            }
        });
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroupEditing;
    private javax.swing.JButton jButtonAddQuestionAndAnswers;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButtonA;
    private javax.swing.JRadioButton jRadioButtonA1;
    private javax.swing.JRadioButton jRadioButtonB;
    private javax.swing.JRadioButton jRadioButtonB1;
    private javax.swing.JRadioButton jRadioButtonC;
    private javax.swing.JRadioButton jRadioButtonC1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbAddUser;
    private javax.swing.JButton jbAddUser1;
    private javax.swing.JButton jbDeleteUser;
    private javax.swing.JButton jbListUsers;
    private javax.swing.JComboBox<String> jcbProfil;
    private javax.swing.JLabel jlLogin;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlName1;
    private javax.swing.JLabel jlName2;
    private javax.swing.JLabel jlName3;
    private javax.swing.JLabel jlName4;
    private javax.swing.JLabel jlName5;
    private javax.swing.JLabel jlName6;
    private javax.swing.JLabel jlName7;
    private javax.swing.JLabel jlName8;
    private javax.swing.JLabel jlName9;
    private javax.swing.JLabel jlPassword;
    private javax.swing.JLabel jlProfil;
    private javax.swing.JTable jtQuestionsTable;
    private javax.swing.JTable jtUsersInfo;
    private javax.swing.JTextField jtfId;
    private javax.swing.JTextField jtfLogin;
    private javax.swing.JTextField jtfName;
    private javax.swing.JPasswordField jtfPassword;
    private javax.swing.JTextField jtfQuestion;
    private javax.swing.JTextField jtfQuestionEditing;
    private javax.swing.JTextField jtfReponseA;
    private javax.swing.JTextField jtfReponseA1;
    private javax.swing.JTextField jtfReponseB;
    private javax.swing.JTextField jtfReponseB1;
    private javax.swing.JTextField jtfReponseC;
    private javax.swing.JTextField jtfReponseC1;
    // End of variables declaration//GEN-END:variables


private int addQuestionToQuestionsTable()
{
        String question = jtfQuestion.getText();
 int id =-1;

        try 
        {
            String req = "INSERT INTO questiontable VALUES (null, ?)";
            // Establish a connection with the database
            Connection cnx = DBConnection.connect();
            
            // creating a statement
            PreparedStatement ps = cnx.prepareStatement(req, Statement.RETURN_GENERATED_KEYS);
            
        
            ps.setString(1,question);
            
            int state1 = ps.executeUpdate();
  
 
             if (state1==1)
             {
                   ResultSet res = ps.getGeneratedKeys();
                     if (res.next())
                    {
                      id = res.getInt(1);
                     System.out.println("Inserted ID " + id); // display inserted record
                    }
             }
          
         
        }
             catch (SQLException ex)
        {
               System.out.println("Error adding question! "+ex.getMessage() + "\n");
              ex.getStackTrace();
        }
         return id;


}

private boolean addAnswerAToAnswerTable(int questionId)
{
    String reponseA =jtfReponseA.getText().trim();
    int reponseACorrect = jRadioButtonA.isSelected()? 1: 0;
    
   boolean isQuestionAdded = false;

        try 
        {
            String req = "INSERT INTO reponsetable VALUES (null, ?, ?, ?)";
            // Establish a connection with the database
            Connection cnx = DBConnection.connect();
            
            // creating a statement
            PreparedStatement ps = cnx.prepareStatement(req, Statement.RETURN_GENERATED_KEYS);
            
        
            ps.setString(1,reponseA);
            ps.setInt(2,reponseACorrect);
            ps.setInt(3,questionId);
            //executing an update
         
           
           int state1 = ps.executeUpdate();

             if (state1==1)
             {
                 System.out.println("Answer inserted"); // display inserted record
           return true;
             }
          
         
        }
             catch (SQLException ex)
        {
               System.out.println("Error adding answer! "+ex.getMessage() + "\n");
              ex.getStackTrace();
        }
         return isQuestionAdded;


}


private boolean addAnswerBToAnswerTable(int questionId)
{
    String reponseB =jtfReponseB.getText().trim();
    int reponseBCorrect = jRadioButtonB.isSelected()? 1: 0;
    
   boolean isQuestionAdded = false;

        try 
        {
            String req = "INSERT INTO reponsetable VALUES (null, ?, ?, ?)";
            // Establish a connection with the database
            Connection cnx = DBConnection.connect();
            
            // creating a statement
            PreparedStatement ps = cnx.prepareStatement(req, Statement.RETURN_GENERATED_KEYS);
            
        
            ps.setString(1,reponseB);
            ps.setInt(2,reponseBCorrect);
            ps.setInt(3,questionId);
            //executing an update
         
           
           int state1 = ps.executeUpdate();

             if (state1==1)
             {
                 System.out.println("Answer B inserted"); // display inserted record
           return true;
             }
          
         
        }
             catch (SQLException ex)
        {
               System.out.println("Error adding answer! "+ex.getMessage() + "\n");
              ex.getStackTrace();
        }
         return isQuestionAdded;


}

private boolean addAnswerCToAnswerTable(int questionId)
{
    String reponseC =jtfReponseC.getText().trim();
    int reponseCCorrect = jRadioButtonC.isSelected()? 1: 0;
    
   boolean isQuestionAdded = false;

        try 
        {
            String req = "INSERT INTO reponsetable VALUES (null, ?, ?, ?)";
            // Establish a connection with the database
            Connection cnx = DBConnection.connect();
            
            // creating a statement
            PreparedStatement ps = cnx.prepareStatement(req, Statement.RETURN_GENERATED_KEYS);
            
        
            ps.setString(1,reponseC);
            ps.setInt(2,reponseCCorrect);
            ps.setInt(3,questionId);
            //executing an update
         
           
           int state1 = ps.executeUpdate();

             if (state1==1)
             {
                 System.out.println("Answer inserted"); // display inserted record
           return true;
             }
          
         
        }
             catch (SQLException ex)
        {
               System.out.println("Error adding answer! "+ex.getMessage() + "\n");
              ex.getStackTrace();
        }
         return isQuestionAdded;


}



public void updateTableQuestions()
    {
    ResultSet res = null;
        
        String req = "SELECT * FROM questiontable";

         try
        {

            Connection cnx =  DBConnection.connect();
            Statement stmt = cnx.createStatement();
            
            res = stmt.executeQuery(req);
            
            //create a new model for our JTable, it receives its data from a method in Utility Class
            DefaultTableModel monModel = Utility.buildTableModel(res);
            jtQuestionsTable.setModel(monModel);

        }catch (SQLException ex)
        {
            System.err.println("PConnection Problem!");
        }
    
    
    }


private void getAnswersOfQuestion(int idQuest)
{
 
    ResultSet res = null;
        String req = "SELECT * FROM reponsetable WHERE idQuest = ?;";
         try
        {
            Connection cnx =  DBConnection.connect();
            PreparedStatement ps = cnx.prepareStatement(req);
            
            ps.setInt(1,idQuest);

          res = ps.executeQuery();
         
          int answerI=0;
           while(res.next())
           {
           
             currentAnswers[answerI] = res.getString("enonce");
             correcyAnswers[answerI] = res.getInt("correct");
             correcyAnswersIds[answerI] = res.getInt("idRep");
            System.out.println("answer "+ answerI +" with id" + correcyAnswersIds[answerI]);
           System.out.println("Query exists");
           answerI++;
           
           }   
         
           

        }catch (SQLException ex)
        {
            System.err.println("PConnection Problem !!");
        }
    


}




private void modifyAnswerA(int IdQuestion)
{

int answerAcorrect = jRadioButtonA1.isSelected()?1:0;
               ResultSet res = null;

       
       String reponseA1Enonce = jtfReponseA1.getText().toString().trim();

       
      if(IdQuestion != -1)//if a row is indeed selected
      {
          String req = "UPDATE reponsetable " +
                   "SET enonce = '"+reponseA1Enonce+ "'" 
                  + " , correct= " 
                  + answerAcorrect
                  + " WHERE idQuest = "+ IdQuestion+ " AND idRep = "+correcyAnswersIds[0];
          
          System.err.println("id= "+IdQuestion+" Req: " + req);
         try
        {

            Connection cnx =  DBConnection.connect();
            Statement stmt = cnx.createStatement();
        
            
            stmt.executeUpdate(req);
  
       // System.err.println("Req: " + req);

    

        }catch (SQLException ex)
        {
            System.err.println("PConnection Problem!");
              System.out.println("Error: ! "+ex.getMessage() + "\n");
              ex.getStackTrace();
        }
      }


}


private void modifyAnswerB(int IdQuestion)
{
int answerBcorrect = jRadioButtonB1.isSelected()?1:0;

               ResultSet res = null;

       
       String reponseB1Enonce = jtfReponseB1.getText().toString().trim();

       
      if(IdQuestion != -1)//if a row is indeed selected
      {
          String req = "UPDATE reponsetable " +
                   "SET enonce = '"+reponseB1Enonce+ "'" 
                  + " , correct= " 
                  + answerBcorrect
                  + " WHERE idQuest = "+ IdQuestion+ " AND idRep = "+correcyAnswersIds[1];
          
          System.err.println("id= "+IdQuestion+" Req: " + req);
         try
        {

            Connection cnx =  DBConnection.connect();
            Statement stmt = cnx.createStatement();
        
            
            stmt.executeUpdate(req);
  
       // System.err.println("Req: " + req);

    

        }catch (SQLException ex)
        {
            System.err.println("PConnection Problem!");
              System.out.println("Error: ! "+ex.getMessage() + "\n");
              ex.getStackTrace();
        }
      }


}


private void modifyAnswerC(int IdQuestion)
{

int answerCcorrect = jRadioButtonC1.isSelected()?1:0;
               ResultSet res = null;

       
       String reponseC1Enonce = jtfReponseC1.getText().toString().trim();

       
      if(IdQuestion != -1)//if a row is indeed selected
      {
       String req = "UPDATE reponsetable " +
                   "SET enonce = '"+reponseC1Enonce+ "'" 
                  + " , correct= " 
                  + answerCcorrect
                  + " WHERE idQuest = "+ IdQuestion+ " AND idRep = "+correcyAnswersIds[2];
          
          System.err.println("id= "+IdQuestion+" Req: " + req);
         try
        {

            Connection cnx =  DBConnection.connect();
            Statement stmt = cnx.createStatement();
        
            
            stmt.executeUpdate(req);
  
       // System.err.println("Req: " + req);

    

        }catch (SQLException ex)
        {
            System.err.println("PConnection Problem!");
              System.out.println("Error: ! "+ex.getMessage() + "\n");
              ex.getStackTrace();
        }
      }


}

}
